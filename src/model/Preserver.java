package model;

import java.util.ArrayList;
import java.util.Collection;


import controller.ImportSeafood;
import domainapp.basics.exceptions.ConstraintViolationException;
import domainapp.basics.model.meta.AttrRef;
import domainapp.basics.model.meta.DAssoc;
import domainapp.basics.model.meta.DAssoc.AssocEndType;
import domainapp.basics.model.meta.DAssoc.AssocType;
import domainapp.basics.model.meta.DAssoc.Associate;
import domainapp.basics.model.meta.DAttr;
import domainapp.basics.model.meta.DAttr.Type;
import domainapp.basics.model.meta.DClass;
import domainapp.basics.model.meta.DOpt;
import domainapp.basics.model.meta.MetaConstants;
import domainapp.basics.model.meta.Select;
import domainapp.basics.util.Tuple;


/**

 * @author Tung NT
 *
 */
@DClass(schema="seafoodman")
public class Preserver {
  
  @DAttr(name="id",id=true,auto=true,length=3,mutable=false,optional=false,type=Type.Integer)
  private int id;
  private static int idCounter;
  
  @DAttr(name="name",type=Type.String,length=20,optional=false)
  private String name;
  
  @DAttr(name="imSeafood",type=Type.Domain,serialisable=false)
  @DAssoc(ascName="imSeafood-has-preserver",role="preserver",
  ascType=AssocType.One2Many, endType=AssocEndType.One,
  associate=@Associate(type=ImportSeafood.class,cardMin=1,cardMax=MetaConstants.CARD_MORE))
  private Collection<ImportSeafood> imSeafoods;

  
  @DAttr(name="SeafoodLists",type=Type.Collection,optional = false,
		  serialisable=false,filter=@Select(clazz=ImportSeafood.class))
  @DAssoc(ascName="imSeafood-has-preser",role="preser",
	      ascType=AssocType.One2Many,endType=AssocEndType.One,
	      associate=@Associate(type=ImportSeafood.class,cardMin=0,cardMax=30))
  private Collection<ImportSeafood> SeafoodLists;
  private int importCount;
  
  // from object form: Student is not included 
  @DOpt(type = DOpt.Type.ObjectFormConstructor)
  @DOpt(type=DOpt.Type.RequiredConstructor)
  public Preserver(@AttrRef("name") String name) {
	  this(null, name,null);
  }

  // from object form: Student is included
  @DOpt(type=DOpt.Type.ObjectFormConstructor)
  public Preserver(@AttrRef("name") String name,
		  @AttrRef("imSeafood") Collection<ImportSeafood> imSeafoods) {
    this(null, name, imSeafoods);
  }

  // from data source
  @DOpt(type=DOpt.Type.DataSourceConstructor)
  public Preserver(@AttrRef("id") Integer id, @AttrRef("name") String name) {
    this(id, name,null);
  }
  
  // based constructor (used by others)
  private Preserver(Integer id, String name, Collection<ImportSeafood> imSeafood ) {
    this.id = nextId(id);
    this.name = name;
    imSeafoods = new ArrayList<>();
    SeafoodLists = new ArrayList<>();
    importCount = 0;
   
  }
  
  private static int nextId(Integer currID) {
    if (currID == null) {
      idCounter++;
      return idCounter;
    } else {
      int num = currID.intValue();
      if (num > idCounter)
        idCounter = num;
      
      return currID;
    }
  }

  /**
   * @requires 
   *  minVal != null /\ maxVal != null
   * @effects 
   *  update the auto-generated value of attribute <tt>attrib</tt>, specified for <tt>derivingValue</tt>, using <tt>minVal, maxVal</tt>
   */
  @DOpt(type=DOpt.Type.AutoAttributeValueSynchroniser)
  public static void updateAutoGeneratedValue(
      DAttr attrib,
      Tuple derivingValue, 
      Object minVal, 
      Object maxVal) throws ConstraintViolationException {
    
    if (minVal != null && maxVal != null) {
      //TODO: update this for the correct attribute if there are more than one auto attributes of this class 
      int maxIdVal = (Integer) maxVal;
      if (maxIdVal > idCounter)  
        idCounter = maxIdVal;
    }
  }
  
  public int getId() {
    return id;
  }
  
  public String getName() {
    return name;
  }
  
  public void setName(String name) {
    this.name = name;
  }

  public Collection<ImportSeafood> getImportSeafood(){
	  return imSeafoods;
  }
  @DOpt(type = DOpt.Type.LinkAdderNew)
	public void setNewImSeafood(Collection<ImportSeafood> imSeafood) {
		this.imSeafoods = imSeafood;
		// do other updates here (if needed)
	}
  public void setImSeafood(Collection<ImportSeafood> imSeafood) {
		this.imSeafoods = imSeafood;
	}
  
  @DOpt(type=DOpt.Type.LinkAdder)
  //only need to do this for reflexive association: @MemberRef(name="enrolments")
  public boolean addEnrolment(ImportSeafood e) {
    if (!SeafoodLists.contains(e))
    	SeafoodLists.add(e);
    return false; 
  }
  @DOpt(type=DOpt.Type.LinkAdderNew)
  public boolean addNewEnrolment(ImportSeafood e) {
	  SeafoodLists.add(e);
    
    importCount++;
    
    
    // no other attributes changed (average mark is not serialisable!!!)
    return false; 
  }
  @DOpt(type=DOpt.Type.LinkAdder)
  //@MemberRef(name="enrolments")
  public boolean addEnrolment(Collection<ImportSeafood> enrols) {
    boolean added = false;
    for (ImportSeafood e : enrols) {
      if (!SeafoodLists.contains(e)) {
        if (!added) added = true;
        SeafoodLists.add(e);
      }
    }
    return false; 
  }
  @DOpt(type=DOpt.Type.LinkAdderNew)
  public boolean addNewEnrolment(Collection<ImportSeafood> enrols) {
	  SeafoodLists.addAll(enrols);
    importCount+=enrols.size();
    return false; 
  }
  @DOpt(type=DOpt.Type.LinkRemover)
  //@MemberRef(name="enrolments")
  public boolean removeEnrolment(ImportSeafood e) {
    boolean removed = SeafoodLists.remove(e);
    if (removed) {
      importCount--;     
    }
    return false; 
  }
  public void setEnrolments(Collection<ImportSeafood> en) {
	    this.SeafoodLists = en;
	    importCount = en.size();
  }
  public Collection<ImportSeafood> getEnrolments() {
	    return SeafoodLists;
  }

  @DOpt(type=DOpt.Type.LinkCountGetter)
  public Integer getEnrolmentsCount() {
    return importCount;
    //return enrolments.size();
  }

  @DOpt(type=DOpt.Type.LinkCountSetter)
  public void setEnrolmentsCount(int count) {
    importCount = count;
  }
  @Override
  public String toString() {
    return name;
  }
}
