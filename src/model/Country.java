package model;

import java.util.ArrayList;
import java.util.Collection;

import domainapp.basics.exceptions.ConstraintViolationException;
import domainapp.basics.model.meta.AttrRef;
import domainapp.basics.model.meta.DAssoc;
import domainapp.basics.model.meta.DAttr;
import domainapp.basics.model.meta.DOpt;
import domainapp.basics.model.meta.MetaConstants;
import domainapp.basics.model.meta.DAssoc.AssocEndType;
import domainapp.basics.model.meta.DAssoc.AssocType;
import domainapp.basics.model.meta.DAssoc.Associate;
import domainapp.basics.model.meta.DAttr.Type;
import domainapp.basics.model.meta.DClass;
import domainapp.basics.util.Tuple;

import model.Customer;

/**
 * @overview represent a country (a ForeignSeafood's origin)
 * 
 * @author Do Thi Thuy Linh
 */
@DClass(schema = "seafoodman")
public class Country {
	
	// attributes
	@DAttr(name = "id", id = true, auto = true, type = Type.Integer, length = 3, mutable = false, optional = false)
	private int id;
	private static int idCounter = 0;

	@DAttr(name = "name", type = Type.String, length = 35, optional = false)
	private String name;

	@DAttr(name="foreign-seafood",type=Type.Domain,serialisable=false)
	@DAssoc(ascName="foreignseafood-has-country",role="country",
	ascType=AssocType.One2Many, endType=AssocEndType.One,
	associate=@Associate(type=ForeignSeafood.class,cardMin=1,cardMax=MetaConstants.CARD_MORE))
	private Collection<ForeignSeafood> fseafoods;
	
	@DAttr(name="customer",type=Type.Domain,serialisable=false)
	@DAssoc(ascName="customer-has-country",role="country",
	ascType=AssocType.One2Many, endType=AssocEndType.One,
	associate=@Associate(type=Customer.class,cardMin=1,cardMax=MetaConstants.CARD_MORE))
	private Collection<Customer> customers;

	@DOpt(type = DOpt.Type.DataSourceConstructor)
	public Country(@AttrRef("id") Integer id, @AttrRef("name") String name) {
		this(id, name, null, null);
	}

	@DOpt(type = DOpt.Type.ObjectFormConstructor)
	public Country(@AttrRef("name") String name,@AttrRef("seafood") Collection<ForeignSeafood> fseafoods,
			@AttrRef("customer") Collection<Customer> customers) {
		this(null, name, fseafoods, customers);
	}

	// Constructor with name only
	@DOpt(type = DOpt.Type.ObjectFormConstructor)
	@DOpt(type = DOpt.Type.RequiredConstructor)
	public Country(@AttrRef("name") String name) {
		this(null, name, null, null);
	}

	private Country(Integer id, String cityName, Collection<ForeignSeafood> fseafood, Collection<Customer> customer) {
		this.id = nextId(id);
		this.name = cityName;
		fseafoods = new ArrayList<>();
		customers = new ArrayList<>();
	}

	private static int nextId(Integer currID) {
		if (currID == null) {
			idCounter++;
			return idCounter;
		} else {
			int num = currID.intValue();
			if (num > idCounter)
				idCounter = num;

			return currID;
		}
	}

	/**
	 * @requires minVal != null /\ maxVal != null
	 * @effects update the auto-generated value of attribute <tt>attrib</tt>,
	 *          specified for <tt>derivingValue</tt>, using <tt>minVal, maxVal</tt>
	 */
	@DOpt(type = DOpt.Type.AutoAttributeValueSynchroniser)
	public static void updateAutoGeneratedValue(DAttr attrib, Tuple derivingValue, Object minVal, Object maxVal)
			throws ConstraintViolationException {

		if (minVal != null && maxVal != null) {
			int maxIdVal = (Integer) maxVal;
			if (maxIdVal > idCounter)
				idCounter = maxIdVal;
		}
	}

	public void setName(String name) {
		this.name = name;
	}

	public Integer getId() {
		return id;
	}

	public String getName() {
		return name;
	}

	public Collection<ForeignSeafood> getFSeafood() {
		return fseafoods;
	}
	
	public Collection<Customer> getCustomer() {
		return customers;
	}
	
	@DOpt(type = DOpt.Type.LinkAdderNew)
	public void setNewFSeafoods(Collection<ForeignSeafood> fseafoods) {
		this.fseafoods = fseafoods;
		// do other updates here (if needed)
	}

	public void setFSeafoods(Collection<ForeignSeafood> fseafoods) {
		this.fseafoods = fseafoods;
	}
	
	@DOpt(type = DOpt.Type.LinkAdderNew)
	public void setNewCustomer(Collection<Customer> customer) {
		this.customers = customer;
		// do other updates here (if needed)
	}

	public void setCustomer(Collection<Customer> customer) {
		this.customers = customer;
	}
	

	@Override
	public String toString() {
		return name;
	}
}